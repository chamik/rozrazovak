// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  testSessionId Int?
  testSession   TestSession? @relation(fields: [testSessionId], references: [id])

  classYear     Int     @default(0)
  isTeacher     Boolean @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id            Int           @id @default(autoincrement())
  languageLevel Int           @default(0)
  questionText  String        @default("")
  rightAnswer   String        @default("")
  wrongAnswers  String[]      @default(["", "", ""])
  questionType  QuestionType  @default(GRAMMAR)
  pointAmount   Int           @default(1)

  grammarSessions TestSession[] @relation("GrammarQuestions")
}

enum QuestionType {
  GRAMMAR
  READING
  LISTENING
}

model Test {
  id          Int @id @default(autoincrement())
  class       Int @unique // There can only be one test for each class at a time
  timeLimit   Int // in minutes
  started     Boolean

  // amount of questions for the grammar part
  grammarA2Amount Int
  grammarB1Amount Int
  grammarB2Amount Int
  grammarC1Amount Int

  TestSession     TestSession[]
}

model TestSession {
  id        Int      @id @default(autoincrement())
  startTime DateTime

  testId    Int
  Test      Test     @relation(fields: [testId], references: [id])

  grammarQuestions Question[] @relation("GrammarQuestions")
  User             User[]
}
